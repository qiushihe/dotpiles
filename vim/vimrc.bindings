" Delete buffer
map <C-b><C-d> :bd<CR>

" Switch to last buffer
map <C-b><C-b> :b#<CR>

" Close window
map <C-w><C-d> :close<CR>

" Window Split
map <C-w><C-v> :vsplit<CR>
map <C-w><C-s> :split<CR>

" Window Navigation
map <C-Up> <C-W>k
map <C-Down> <C-W>j
map <C-Left> <C-W>h
map <C-Right> <C-W>l

" Window Resizing
map <C-S-Up> <C-W>-
map <C-S-Down> <C-W>+
map <C-S-Left> <C-W><
map <C-S-Right> <C-W>>

" Window Swap
function! MarkWindowSwap()
  " marked window number
  let g:markedWinNum = winnr()
  let g:markedBufNum = bufnr("%")
endfunction

function! DoWindowSwap()
  let curWinNum = winnr()
  let curBufNum = bufnr("%")
  " Switch focus to marked window
  exe g:markedWinNum . "wincmd w"

  " Load current buffer on marked window
  exe "hide buf" curBufNum

  " Switch focus to current window
  exe curWinNum . "wincmd w"

  " Load marked buffer on current window
  exe "hide buf" g:markedBufNum
endfunction

nnoremap <C-S-W><C-S-Down> :call MarkWindowSwap()<CR> <C-w>j :call DoWindowSwap()<CR>
nnoremap <C-S-W><C-S-Up> :call MarkWindowSwap()<CR> <C-w>k :call DoWindowSwap()<CR>
nnoremap <C-S-W><C-S-Left> :call MarkWindowSwap()<CR> <C-w>h :call DoWindowSwap()<CR>
nnoremap <C-S-W><C-S-Right> :call MarkWindowSwap()<CR> <C-w>l :call DoWindowSwap()<CR>

